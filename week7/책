소수 나열하기

- 2부터 n-1까지 어떤 정수로도 나누어 떨어지지 않음

```python
# 1000 이하의 소수 나열

counter = 0  # 나눗셈 횟수를 카운트

for n in range(2, 1001):
    for i in range(2, n):
        counter += 1
        if n % i == 0:  # 나누어 떨어지면 소수X
            break

    else:               # 나누어 떨어지지 않으면 다음 수행
        print(n)
print(f'나눗셈을 실행한 횟수: {counter}')
```

- n을 2부터 1000까지 1씩 증가시키면서 i또한 2부터 n-1까지 1씩 증가 시키면서 n을 i로 나누어 떨어지지 않는 수를 구해 출력(n이 소수 → for문을 마지막 까지 실행 후 else문을 실행해 n값 출력, n이 소수X → break로 for문 중단

```python
# 1000 이하 소수 나열하기(알고리즘 개선1)
 
counter = 0             # 나눗셈 카운트
ptr = 0                 # 이미 찾은 소수 개수
prime = [None] * 500    # 소수를 저장하는 배열

prime[ptr] = 2          # 2는 소수이므로 초깃값 지정
ptr += 1

for n in range(3, 1001, 2): # 홀수만 대상으로
    for i in range(1, ptr): # 이미 찾은 소수로 나눔
        counter += 1
        if n % prime[i] == 0: # 나누어 떨어지면 소수X
            break
    
    else:
        prime[ptr] = n      # 배열에 등록
        ptr += 1

for i in range(ptr):    # ptr의 소수 출력
    print(prime[i])
print(f'나눗셈을 실행한 횟수: {counter}')

```

- 3부터 2씩 증가시켜 홀수를 생성하고, 지금까지 구한 소수로 나눠서  소수를 구함 끝까지 안나누어 떨어지면 배열에 추가후 배열 출력
- n의 제곱근 이하의 어떤 소수로도 나누어 떨어지지 않음 → 소수

```python
# 1000 이하의 소수 나열하기(알고리즘 개선 2)

counter = 0                     # 곱셈과 나눗셈 합한 횟수
ptr = 0                         # 이미 찾은 소수 개수    
prime = [None] * 500            # 소수 저장하는 배열

prime[ptr] = 2 # 2는 소수이므로 추가해놓고 시작
ptr += 1

prime[ptr] = 3 # 3은 소수이므로 추가해놓고 시작
ptr += 1

for n in range(5, 1001, 2):   # 홀수만 
    i = 1
    while prime[i] * prime[i] <= n:
        counter += 2        # 곱셈, 나눗셈을 동시에 하므로 2씩 증가
        if n % prime[i] == 0:  # 나누어 떨어지면 소수 아님
            break
        i += 1     # while문이 실행되지 않아 곱셈 횟수는 계산X
    else:
        prime[ptr] = n       # 소수로 배열에 등록
        ptr += 1
        counter += 1

for i in range(ptr):   # 소수 출력
    print(prime[i])
print(f'곱셈과 나눗셈 실행 횟수: {counter}')
```

2씩 증가 → prime[i] * prime[i], n % prime[i]  두 연산 실행 횟수를 세는 것

prime[i] * prime[i] <= n 이 성립하지 않으면 2가 증가되지 않으므로 while 문 종료 후 else 문에서 1 증가시킴

리스트의 원소, 복사

```python
x = [[1, 2, 3], [4, 5, 6]]
y = x.copy()  # x를 y로 얕은복사(값을 나타내는 주소만 복사, 값 자체 복사X)
x[0][1] = 9
=> x 
[[1, 9, 3], [4, 5, 6]]
=> y
[[1, 9, 3], [4, 5, 6]]
```

- copy( ) 함수로 리스트를 복사할 때, 복사 후 원솟값 변경 시 복사된 원솟값도 변경됨
- 얕은 복사는 리스트 안의 모든 원소가 참조하는 곳까지 복사됨
- 피하기 위해 깊은복사 → deepcopy( ) 함수 수행

```python
import copy   # deepcopy를 사용을 위해 copy 모듈 임포트
x = [[1, 2, 3], [4, 5, 6]]
y = copy.deepcopy(x)  # x를 y로 깊은 복사
x[0][1] = 9
x
=> [[1, 9 ,3], [4, 5, 6]] # 대입된 9 출력
y
=> [[1, 2, 3], [4 , 5, 6]] # y 영향X
```

- x[0][1]에9 대입 → x[0][1]이 참조하는 곳을 9로 변경, y[0][1] 변경X

|     특징      |              얕은 복사               |            깊은 복사              |
| **복사 대상** |             참조값만 복사            |    값과 참조 형식 모두 복사(전체복사)    |
| **사용 예시** |     `list.copy()`, `dict.copy()` 등 | `import copy` 후 `copy.deepcopy(obj)` |
