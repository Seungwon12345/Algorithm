# https://school.programmers.co.kr/learn/courses/30/lessons/136798

def solution(number, limit, power):
    answer = 0  #'임의의 자연수 N의 약수들 중에서 두 약수의 곱이 N이 되는 약수 A와 약수 B는 반드시 존재한다'는 규칙이 존재하기 때문에, 자연수 N의 제곱근까지의 약수를 구하면 그 짝이 되는 약수는 자동으로 구해진다. (i, n//i)
    count = [] # 약수 개수 넣으려고 / 약수는 항상 짝을 가진다
    
    for i in range(1, number+1): # (1, 6) i = 3
        a = 0  # 반복문 돌때마다 약수 개수 초기화 
        for j in range(1, int(i**0.5) + 1): # (1, 2)       1 부터 i까지 전부 돌리지 말고 i의 제곱근 까지만
            if i % j == 0:  # ex)       2 % 1 == 0            i=36 (1, 36)   36**0.5 => 6  |i=30   30 **0.5 => 5.48   
                a += 1          #                                  (2, 18)                 |   (1, 30)   
                if j**2 != i:   # 제곱수 아닌경우 세려고 1**2 != 2    (3, 12)                 |   (2, 15)  
                    a += 1      #                                  (4, 9)                  |   (3, 10)
        count.append(a)        #      count = [1, 2, 2, 3, 2]      (6, 6)                  |   (5, 6)
                
    for n in range(len(count)):
        if count[n] > limit:
            count[n] = power
    
    for k in range(len(count)):         # count = [1, 2, 2, 3, 2]
        answer += count[k]
    return answer





# def solution(number, limit, power): 시간초과 남
#     answer = 0
#     count = []
    
#     for i in range(1, number+1): 
#         a = 0
#         for j in range(1, i+1):
#             if i % j == 0:
#                 a += 1 
#         count.append(a)
                
#     for n in range(len(count)):
#         if count[n] > limit:
#             count[n] = power
    
#     for k in range(len(count)):
#         answer += count[k]
#     return answer
